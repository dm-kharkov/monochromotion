// Variables to control the effect
// This effect requires a fair chunk of compiled CSS so probably limit the number of sections to the number that you will have
$min_sections: 3; // The minimum number of content sections you're going to have; 2 is min
$max_sections: 3; // The maximum number of content sections you're going to have
$split_width: 30px; // Sizes the angle and min width of each content section

// The main slider code
ul.slider {
  width: 100%;
  height: max(100dvh, 500px);
  display: grid;
  list-style: none;
  padding: 0;

  > li {
    position: relative;
    grid-area: 1 / 1;
    transition: clip-path 0.5s ease;
  }

  > :nth-child(1) {
    background: blue;
  }

  > :nth-child(2) {
    background: teal;
  }

  > :nth-child(3) {
    background: rebeccapurple;
  }

  > :nth-child(4) {
    background: orange;
  }

  > :nth-child(5) {
    background: green;
  }

  .background {
    position: absolute;
    inset: 0;

    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  }

  .decor {
    height: 100%;
    overflow: hidden;
    will-change: opacity;
  }

  @for $num_sections from $min_sections to ($max_sections + 1) {
    $ns1: $num_sections + 1; // Number of sections + 1, used in calculations
    $pps: calc(100% / $num_sections); // Percent per section

    &:has(> :last-child:nth-child(#{$num_sections})) {
      // Initial styles
      @for $i from 2 to $ns1 {
        & > :nth-child(#{$i}) {
          // Initial clip paths
          clip-path: polygon(
            calc(#{($i - 1) * $pps} - #{$split_width}) 100%,
            calc(#{($i - 1) * $pps} + #{$split_width}) 0,
            100% 0,
            100% 100%
          );
        }
      }

      // Target effects
      @for $i from 1 to $ns1 {
        @for $j from 1 to $ns1 {
          &:has(li:nth-child(#{$i}):where(
            :hover,
            :focus,
            :focus-within,
            [aria-selected="true"] // For potential JS-driven effects
          )) > :nth-child(#{$j}) {
            $num_left: $j - 1;
            $num_right: $num_sections - $j;

            // Is or is to the left of the targeted item
            @if $j <= $i {
              @if $j != 1 {
                $base_num: $num_left * 2;
                clip-path: polygon(
                  #{($base_num + 0) * $split_width} 100%,
                  #{($base_num + 2) * $split_width} 0,
                  100% 0,
                  100% 100%
                );
              }
            }
              // Is to the right of the targeted item
            @else if $j > $i {
              $base_num: $num_right * 2;
              clip-path: polygon(
                calc(100% - #{($base_num + 4) * $split_width}) 100%,
                calc(100% - #{($base_num + 2) * $split_width}) 0,
                100% 0,
                100% 100%
              );
            }
          }
        }
      }
    }
  }

  @media (min-width: 480px) {
    $min_sections: 5;
    $max_sections: 5;

    // loop code is duplicated to restart on resize
    @for $num_sections from $min_sections to ($max_sections + 1) {
      $ns1: $num_sections + 1;
      $pps: calc(100% / $num_sections);

      &:has(> :last-child:nth-child(#{$num_sections})) {
        @for $i from 2 to $ns1 {
          & > :nth-child(#{$i}) {
            clip-path: polygon(
              calc(#{($i - 1) * $pps} - #{$split_width}) 100%,
              calc(#{($i - 1) * $pps} + #{$split_width}) 0,
              100% 0,
              100% 100%
            );
          }
        }

        @for $i from 1 to $ns1 {
          @for $j from 1 to $ns1 {
            &:has(li:nth-child(#{$i}):where(
            :hover,
            :focus,
            :focus-within,
            [aria-selected="true"]
          )) > :nth-child(#{$j}) {
              $num_left: $j - 1;
              $num_right: $num_sections - $j;

              @if $j <= $i {
                @if $j != 1 {
                  $base_num: $num_left * 2;
                  clip-path: polygon(
                    #{($base_num + 0) * $split_width} 100%,
                    #{($base_num + 2) * $split_width} 0,
                    100% 0,
                    100% 100%
                  );
                }
              }

              @else if $j > $i {
                $base_num: $num_right * 2;
                clip-path: polygon(
                  calc(100% - #{($base_num + 4) * $split_width}) 100%,
                  calc(100% - #{($base_num + 2) * $split_width}) 0,
                  100% 0,
                  100% 100%
                );
              }
            }
          }
        }
      }
    }
  }
}

// Content effect - separated since slider doesn't need to change 1st element & easier to understand
ul.slider {
  @for $num_sections from $min_sections to ($max_sections + 1) {
    $ns1: $num_sections + 1; // Number of sections + 1, used in calculations
    $pps: calc(100% / $num_sections); // Percent per section

    &:has(> :last-child:nth-child(#{$num_sections})) {
      // Initial styles
      @for $i from 1 to $ns1 {
        & > :nth-child(#{$i}) {
          .decor {
            opacity: 1;
            transition: opacity 0.5s;
            background-color: rgba(0, 0, 0, 0.5);
            mix-blend-mode: multiply;
          }

          // Targeted effect
          &:where(:hover, :focus, :focus-within) .decor {
            opacity: 0;
            transition: opacity 0.7s;
          }
        }
      }
    }
  }

  @media (min-width: 480px) {
    $min_sections: 5;
    $max_sections: 5;

    // loop code is duplicated to restart on resize
    @for $num_sections from $min_sections to ($max_sections + 1) {
      $ns1: $num_sections + 1;
      $pps: calc(100% / $num_sections);

      &:has(> :last-child:nth-child(#{$num_sections})) {
        @for $i from 1 to $ns1 {
          & > :nth-child(#{$i}) {
            .decor {
              opacity: 1;
              transition: opacity 0.5s;
              background-color: rgba(0, 0, 0, 0.5);
              mix-blend-mode: multiply;
            }

            &:where(:hover, :focus, :focus-within) .decor {
              opacity: 0;
              transition: opacity 0.7s;
            }
          }
        }
      }
    }
  }
}
